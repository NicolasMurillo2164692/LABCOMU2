options:
  parameters:
    author: nicolas_murillo - andrey_salom-  danny_navarro
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: uis
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: lab1_comu2
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: lab1 comunicaciones 2
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '32000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12]
    rotation: 0
    state: enabled
- name: blocks_vector_source_x_0
  id: blocks_vector_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    repeat: 'True'
    tags: '[]'
    type: float
    vector: (2, 4, 26)
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [160, 276.0]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\n\n\nimport numpy as np\n\
      from gnuradio import gr\nclass blk (gr. sync_block ):\n\tdef __init__ ( self\
      \ ) : # only default arguments here\n\t\tgr. sync_block . __init__ (self ,name\
      \ =\" Promedios_de_tiempos \", # will show up in GRC\n\t\tin_sig =[ np. float32\
      \ ], out_sig =[ np. float32 ,np. float32 ,np.float32 , np.float32 ,\n\t\tnp.\
      \ float32 ])\n\t\tself . acum_ant = 0\n\t\tself . acum_ant1 = 0\n\t\tself .\
      \ acum_ant2 = 0\n\t\tself . Nt = 0\n\t\t\n\tdef work (self , input_items , output_items\
      \ ):\n\t\tx = input_items [0] # entrada\n\t\t\n\t\ty0 = output_items [0] # Promedio\
      \ \n\t\ty1 = output_items [1] # Media \n\t\ty2 = output_items [2] # RMS \n\t\
      \ty3 = output_items [3] # Potencia promedio \n\t\ty4 = output_items [4] # Desviacion\
      \ estandar\n\t\t\n\t\t\n\t\tN = len (x)\n\t\tself . Nt = self . Nt + N\n\t\t\
      \n\t\t# Calculo del promedio\n\t\tacum = self . acum_ant + np. cumsum (x)\n\t\
      \tself . acum_ant = acum [N -1]\n\t\ty0 [:]= acum/ self . Nt\n\t\t\n\t\t# Calculo\
      \ de la media cuadratica\n\t\tx2=np. multiply (x,x)\n\t\tacum1 = self . acum_ant1\
      \ + np. cumsum (x2)\n\t\tself . acum_ant1 = acum1 [N -1]\n\t\ty1 [:] = acum1\
      \ / self . Nt\n\t\t# RMS\n\t\ty2 [:] = np. sqrt (y1)\n\t\t\n\t\t# potencia promedio\n\
      \t\ty3 [:] = np. multiply (y2 ,y2)\n\t\t\n\t\t# desviacion estandar\n\t\trest=x-y0\n\
      \t\tx3 = np. multiply (rest ,rest)\n\t\tacum2 = self . acum_ant2 + np. cumsum\
      \ (x3)\n\t\tself . acum_ant2 = acum2 [N -1]\n\t\ty4 [:] = np. sqrt ( acum2 /\
      \ self . Nt )\n\t\treturn len (x)\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: (' Promedios_de_tiempos ', 'blk', [], [('0', 'float', 1)], [('0', 'float',
      1), ('1', 'float', 1), ('2', 'float', 1), ('3', 'float', 1), ('4', 'float',
      1)], '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [360, 232.0]
    rotation: 0
    state: true
- name: qtgui_number_sink_0
  id: qtgui_number_sink
  parameters:
    affinity: ''
    alias: ''
    autoscale: 'True'
    avg: '0'
    color1: ("black", "black")
    color10: ("black", "black")
    color2: ("black", "black")
    color3: ("black", "black")
    color4: ("black", "black")
    color5: ("black", "black")
    color6: ("black", "black")
    color7: ("black", "black")
    color8: ("black", "black")
    color9: ("black", "black")
    comment: ''
    factor1: '1'
    factor10: '1'
    factor2: '1'
    factor3: '1'
    factor4: '1'
    factor5: '1'
    factor6: '1'
    factor7: '1'
    factor8: '1'
    factor9: '1'
    graph_type: qtgui.NUM_GRAPH_HORIZ
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    max: '1'
    min: '-1'
    name: '"valores"'
    nconnections: '5'
    type: float
    unit1: ''
    unit10: ''
    unit2: ''
    unit3: ''
    unit4: ''
    unit5: ''
    unit6: ''
    unit7: ''
    unit8: ''
    unit9: ''
    update_time: '0.10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [584, 232.0]
    rotation: 0
    state: true

connections:
- [blocks_vector_source_x_0, '0', epy_block_0, '0']
- [epy_block_0, '0', qtgui_number_sink_0, '0']
- [epy_block_0, '1', qtgui_number_sink_0, '1']
- [epy_block_0, '2', qtgui_number_sink_0, '2']
- [epy_block_0, '3', qtgui_number_sink_0, '3']
- [epy_block_0, '4', qtgui_number_sink_0, '4']

metadata:
  file_format: 1
